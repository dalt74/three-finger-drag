#!/usr/bin/env python3
#
# Copyright (c) 2020
#
# The software may be redistributed under GPLv2 or later terms
#
import os.path
import socket
import subprocess
import sys
import threading
import time


pattern = "touchpad"

xdo_opt = "--use-xdotool"
ydo_opt = "--use-ydotool"

options = [
    (ydo_opt, "force using ydotool backend via ydotool daemon"),
    (xdo_opt, "force using xdotool (user session only)"),
    ("--help", "this message"),
]


MODE_READY = 0
MODE_ACTING = 1
MODE_WAITING = 2


class Backend(object):
    def mousedown(self):
        raise NotImplementedError()

    def mouseup(self):
        raise NotImplementedError()

    def mousemove(self, x, y):
        raise NotImplementedError()


class X11Backend(Backend):
    def mousedown(self):
        execute("xdotool mousedown 1")

    def mouseup(self):
        execute("xdotool mouseup 1")

    def mousemove(self, x, y):
        execute("xdotool mousemove_relative -- %s %s" % (x, y))


class YBackend(Backend):
    def __init__(self):
        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.socket.connect("/tmp/.ydotool_socket")

    def mousedown(self):
        self._send(b"\001\000\020\001\001\000\000\000")

    def mouseup(self):
        self._send(b"\001\000\020\001\000\000\000\000")

    def mousemove(self, x, y):
        data = b''
        if x != 0:
            data = data + b"\002\000\000\000" + x.to_bytes(4, 'little', signed=True)
        if y != 0:
            data = data + b"\002\000\001\000" + y.to_bytes(4, 'little', signed=True)
        if x != 0 or y != 0:
            self._send(data)

    def _send(self, data):
        self.socket.send(data)
        self.socket.send(b"\000\000\000\000\000\000\000\000")


def aint(v):
    va = abs(v)
    sg = int(0 if v == 0 else v / va)
    return sg * int(va)


class GestureHandler(object):
    def __init__(self, backend, sleep_interval=1.5):
        self.lock = threading.RLock()
        self.backend = backend
        self.mode = MODE_READY
        self.serial = 0
        self.double_lag = sleep_interval
        self.acc_x = 0.0
        self.acc_y = 0.0

    def start(self):
        with self.lock:
            self._start_activity()

    def end(self, forced=False):
        with self.lock:
            if not forced:
                threading.Thread(target=self._commit, args=[self.serial]).start()
            elif self.mode != MODE_READY:
                self._end_activity()

    def handle(self, x, y):
        with self.lock:
            self.acc_x = self.acc_x + x
            self.acc_y = self.acc_y + y
            ux = aint(self.acc_x)
            uy = aint(self.acc_y)
            self.acc_x -= ux
            self.acc_y -= uy
            self.backend.mousemove(ux, uy)

    def _end_activity(self):
        with self.lock:
            self.backend.mouseup()
            self.mode = MODE_READY

    def _start_activity(self):
        with self.lock:
            self.serial += 1
            if self.mode == MODE_READY:
                self.backend.mousedown()
            self.mode = MODE_ACTING

    def _commit(self, serial):
        self.mode = MODE_WAITING
        time.sleep(self.double_lag)
        with self.lock:
            if self.mode == MODE_WAITING and self.serial == serial:
                self._end_activity()

    def hadle_key(self):
        with self.lock:
            if self.mode != MODE_READY:
                self._end_activity()
                return False
            return True


def execute(cmdline):
    try:
        subprocess.call(cmdline.split())
    except Exception as err:
        print("Error: %s" % err)


def run_loop(handler, device):
    cmd = "stdbuf -oL -- libinput debug-events"
    print("Run: %s" % cmd)
    touchname = os.path.basename(device)
    with subprocess.Popen(
        cmd.split(),
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
        bufsize=0
    ) as child:
        while True:
            try:
                child.wait(timeout=0)
                break
            except subprocess.TimeoutExpired:
                data = child.stdout.readline().decode("utf-8").replace("\n", "")
            if not data:
                continue
            parts = data.split("\t")
            if len(parts) > 0:
                action = parts[0].split()
                if len(action) > 1:
                    if action[0] == touchname:
                        if action[1].startswith("GESTURE_SWIPE"):
                            fingers = parts[1][0:1]
                            if action[1] == "GESTURE_SWIPE_BEGIN" and fingers == "3":
                                handler.start()
                            elif action[1] == "GESTURE_SWIPE_END" and fingers == "3":
                                handler.end()
                            elif action[1] == "GESTURE_SWIPE_UPDATE" and fingers == "3":
                                remn = parts[1][1:].strip().split("/")
                                x = remn[0]
                                y = remn[1].split()[0]
                                handler.handle(float(x), float(y))
                            continue
                    elif action[1].startswith("KEYB"):
                        if handler.hadle_key():
                            continue
                    else:
                        continue
            handler.end(True)


def list_devices():
    """Returns list of tuples (device_name, device_file)"""
    devices = []
    current_device = {}
    with subprocess.Popen(
        "libinput list-devices".split(),
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
        bufsize=0
    ) as child:
        while True:
            data = child.stdout.readline().decode("utf-8").replace("\n", "")
            if not data:
                if not current_device:
                    child.terminate()
                    child.wait()
                    break
                else:
                    if ("device" in current_device) and ("kernel" in current_device):
                        devices.append((current_device["kernel"], current_device["device"]))
                    current_device = {}
            else:
                tokens = [x.strip() for x in data.split(":")]
                if len(tokens) > 1:
                    key = tokens[0].lower()
                    tokens.pop(0)
                    value = ":".join(tokens)
                    current_device[key] = value
    return devices


def find_device(device_list, pattern):
    for dev in device_list:
        name = dev[1].lower()
        if name.find(pattern.lower()) >= 0:
            return dev
    return None


def create_backend():
    if xdo_opt in sys.argv:
        backend = X11Backend()
        print("Using XDOTOOL backend")
        return backend
    try:
        backend = YBackend()
        print("Using YDOTOOL backend")
        return backend
    except:
        if ydo_opt in sys.argv:
            print("Can't start ydotool backend, exit")
            exit(1)
        print("Fallback to XDOTOOL backend")
        return X11Backend()


opts = []
user_opts = [x for x in sys.argv]
user_opts.pop(0)
allowed_opts = [x[0] for x in options]
for x in user_opts:
    if x not in allowed_opts:
        opts.append(x)

if "--help" in sys.argv or "-h" in sys.argv or "-?" in sys.argv or len(opts) > 1:
    print("Usage:")
    print("    three-finger-drag <options> [<device_name>]")
    print("Options:")
    for opt in options:
        print("%s -- %s" % opt)
    print("If no backend enforced try ydotool and fallback to xdotool if failed.")
    print("If no device name specified then use firsy device matching \"*touchpad*\"")
    exit(0)

if opts:
    pattern = opts[0]
devices = list_devices()
device_info = find_device(devices, pattern)
if device_info is None:
    print("Unable to find gesturable device for \"%s\". The devices known are:" % pattern)
    for device_info in devices:
        print("%s => %s" % device_info)
    print("Aborting")
    exit(1)
print("Found device: %s => %s" % device_info)

backend = create_backend()
handler = GestureHandler(backend)
run_loop(handler, device_info[0])
